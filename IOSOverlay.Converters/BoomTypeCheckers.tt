<#@ template  debug="true" hostSpecific="true" language="C#"
#><#@ output extension=".cs"
#><#@ assembly Name="System.Core"
#><#@ assembly Name="System.Windows.Forms"
#><#@ assembly Name="$(SolutionDir)..\Libraries\bin\Release\Simulation.dll"
#><#@ import namespace="System"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Diagnostics"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Reflection"
#><#@ import namespace="System.Collections"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.ComponentModel"
#><#@ import namespace="Simulation"
#>
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Data;
using Simulation;


namespace IOSOverlay.Converters {
<# foreach(var btn in Enum.GetNames(typeof(BoomTypes))) { #>
	[ValueConversion(typeof(Enum), typeof(bool))]
	public class BoomType<#= btn #>Checker:BaseConverter {
		public override object Convert(object value, Type targetType, object parameter, CultureInfo culture) {
			if(value == null) return false;
			try {
				var a = Enum.ToObject(typeof(CraneModels), value);
				var x = BoomTypeAttribute.GetBoomType((CraneModels)a);
				return x == BoomTypes.<#= btn #>;
			} catch {

			}
			return false;
		}
		public override object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) {
			return null;
		}
	}

	[ValueConversion(typeof(Enum), typeof(Visibility))]
	public class BoomType<#= btn #>VisibilityChecker:BaseConverter {
		public override object Convert(object value, Type targetType, object parameter, CultureInfo culture) {
			if(value == null) return Visibility.Collapsed;
			try {
				var a = Enum.ToObject(typeof(CraneModels), value);
				var x = BoomTypeAttribute.GetBoomType((CraneModels)a);
				return (x == BoomTypes.<#= btn #>) ? Visibility.Visible : Visibility.Collapsed;
			} catch {

			}
			return Visibility.Collapsed;
		}
		public override object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) {
			return null;
		}
	}

<# } #>
}
